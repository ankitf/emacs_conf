#+TODO: DISABLED(d) TODO(t) 
* Straight Package Manager 
** Bootstrapping straight
#+BEGIN_SRC emacs-lisp
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
#+END_SRC
** Install use-package
#+BEGIN_SRC emacs-lisp
  (straight-use-package 'use-package)
  (use-package straight
    :custom (straight-use-package-by-default t))
#+END_SRC

* Emacs Startup
  Hide the startup message
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t)
#+END_SRC

* Command as meta on mac
#+begin_src emacs-lisp
  ;;; I prefer cmd key for meta
(setq mac-option-key-is-meta nil
      mac-command-key-is-meta t
      mac-command-modifier 'meta
      mac-option-modifier 'super)
#+end_src

* Backspace Key
Set ctrl+h as backspace and ctrl+? as emacs-help
#+BEGIN_SRC emacs-lisp
(defun delete-word (arg)
  "Delete characters forward until encountering the end of a word.
  With argument, do this that many times."
  (interactive "p")
  (if (use-region-p)
	  (delete-region (region-beginning) (region-end))
    (delete-region (point) (progn (forward-word arg) (point)))))

(defun backward-delete-word (arg)
  "Delete characters backward until encountering the end of a word.
  With argument, do this that many times."
  (interactive "p")
  (delete-word (- arg)))

(global-set-key (kbd "C-?") 'help-command)
(global-set-key (kbd "M-?") 'mark-paragraph)
(global-set-key (kbd "C-h") 'delete-backward-char)
(global-set-key (kbd "M-h") 'backward-delete-word)

#+END_SRC

* Movement 
  Change forward-word and backword-word to better implementation.
  Enables word based editing commands to subword based commands. For eg.
  GtkWindow(Word) -> Gtk and Window(Subwords)
  
#+begin_src emacs-lisp
  (subword-mode +1)
										  ; (setq syntax-subword-skip-spaces t)
#+end_src

* Font Size
  The value is in 1/10pt, so 100 will give you 10pt, etc.
#+begin_src emacs-lisp
(set-face-attribute 'default  nil :height 100)
#+end_src

* Which key
Displays the key bindings following your currently entered incomplete command
#+begin_src emacs-lisp
  (use-package which-key
	:init
	(which-key-mode 1)
	)
#+end_src

* Minibuffer Completions
[[https://www.reddit.com/r/emacs/comments/rbr2x5/completions_in_mini_buffer/][Reddit Discusssion]]
Have tried Helm. Not happy with buffers all over in the completions.
Will be trying vertico, orderless, emarbark  and marginilia. 
** DISABLED Helm
Completions in the minibuffer
#+BEGIN_SRC emacs-lisp
;; (use-package helm 
;;  :straight t
;;  :config
;;    (helm-mode 1)
;;  :bind (("M-x" . helm-M-x)
;;  ("C-x r b" . helm-filtered-bookmarks)
;;  ("C-x C-f"
;; . helm-find-files)))
#+END_SRC
** Vertico
Vertical completion UI for minibuffer. Unlike Helm, which opens new buffer for completions.
[[https://github.com/minad/vertico][github]]
#+BEGIN_SRC emacs-lisp
(use-package vertico
  :straight (vertico :files (:defaults "extensions/*")
					 :includes (vertico-directory)) ;; append to this list to use other vertico extenstions.
  :init (vertico-mode)
  )
#+END_SRC
** Vertico Directory
Ido like directory navigation in vertico.
#+BEGIN_SRC emacs-lisp
(use-package vertico-directory
  :straight nil
  )
#+END_SRC
** Orderless
#+BEGIN_SRC emacs-lisp
(use-package orderless
  :straight t
  :init
  ;; Configure a custom style dispatcher (see the Consult wiki)
  ;; (setq orderless-style-dispatchers '(+orderless-dispatch)
  ;;       orderless-component-separator #'orderless-escapable-split-on-space)
  (setq completion-styles '(orderless)
		completion-category-defaults nil
		completion-category-overrides '((file (styles partial-completion))))
  )
#+END_SRC
** Marginilia
#+BEGIN_SRC emacs-lisp
(use-package marginalia
  :straight t
  :config
  (marginalia-mode)
  )
#+END_SRC
** Embark
#+BEGIN_SRC emacs-lisp
(use-package embark
  :straight t 
  :bind
  (("C-." . embark-act)         ;; pick some comfortable binding
   ("C-;" . embark-dwim)        ;; good alternative: M-.
   ("C-c b" . embark-bindings)) ;; alternative for `describe-bindings'
  :init
  ;; Optionally replace the key help with a completing-read interface
  (setq prefix-help-command #'embark-prefix-help-command)
  :config
  ;; Hide the mode line of the Embark live/completions buffers
  (add-to-list 'display-buffer-alist
			   '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
				 nil
				 (window-parameters (mode-line-format . none))))
  )

#+END_SRC
** SaveHist
Persists history over emacs restarts. Vertico sorts by history position.
#+BEGIN_SRC emacs-lisp
(use-package savehist
  :straight t
  :init
  (savehist-mode)
  )
#+END_SRC
** DISABLED Ido mode
Nothing better than ido for suggestion in find-file and buffers.
#+BEGIN_SRC emacs-lisp
;; (use-package ido
;;   :straight t
;;   :config
;;   (setq ido-enable-flex-matching t)
;;   (ido-mode t)
;;   )
#+END_SRC
** DISABLED Ido-vertical mode
Nothing better than ido for suggestion in find-file and buffers.
#+BEGIN_SRC emacs-lisp
;; (use-package ido-vertical-mode
;;   :straight t
;;   :init
;;   (ido-vertical-mode t)
;;   (setq ido-vertical-define-keys 'C-n-and-C-p-only)
;;   )

#+END_SRC

* Org mode
emacs version: 27.2
org-mode version: 9.4.4 (inbuilt)
#+BEGIN_SRC emacs-lisp
	(use-package org
	  :straight (:type built-in)            ;; using inbuilt org.
	  ;;:straight t    ;; loading external org causes some issues in the org-capture
	  :config
	  (setq org-src-tab-acts-natively t) ;; indent code in org-babel
	  (setq org-startup-folded t) ;; fold org files on startup.
	  ;; (setq org-indent-mode t) ;; indentation in org files
	  :bind (:map org-mode-map
				  ("M-h" . nil) ;; Using this for backward-delete-word
				  )
	  )
  ;; no of empty line when collapsing the trees
  (setq org-cycle-separator-lines 1)

#+END_SRC

* Org Bullets
#+BEGIN_SRC emacs-lisp
(use-package org-bullets
  :straight t
  :init
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC

* Org babel
#+begin_src emacs-lisp
  ;; prerequisite -  python interpreter path
  ;; (setq python-shell-interpreter "/usr/bin/python3")


  (org-babel-do-load-languages 'org-babel-load-languages
							   '(
								 (python . t)
								 ;; (sh . t)
								 ;; (shell . t)
								 ))
  ;; python
  (setq org-babel-python-command "python3")

  ;; Syntax highlight in block
  (setq org-src-fontify-natively t)
  ;; dont prompt before running code in org
  (setq org-confirm-babel-evaluate nil)
  ;; Fix an incompatibility between ob-sync and ob-ipython-packages
  ;; (setq ob-async-no-async-languages-alist '("ipython"))

#+end_src

* Emacs themes
** DISABLED Tango-dark theme
Was not able to clone tango-dark-theme.el from Emacs repo. So created a personal repo, copied the .el file and cloned it.
#+BEGIN_SRC emacs-lisp
  ;; (use-package tango-dark-theme
  ;;    :straight (tango-dark-theme
  ;;           :host github 
  ;;           :repo "ankitf/tango-dark-theme"
  ;;           :branch "main")
  ;; :defer t
  ;; :config (load-theme 'tango-dark))

#+END_SRC
** Zenburn
[[https://github.com/bbatsov/zenburn-emacs][Github]]
Much better than tango-dark. Low contrast and cyan background is easy on the eye. Love it. :)

#+BEGIN_SRC emacs-lisp
  (use-package zenburn-theme
	:straight t
	:config
	(load-theme 'zenburn t))
#+END_SRC

** DISABLED Nord
[[https://www.nordtheme.com/docs/ports/emacs][website]]
#+BEGIN_SRC emacs-lisp
  ;; (use-package nord-theme
  ;;   :straight t
  ;;   :config
  ;;   (load-theme 'nord t))
#+END_SRC
** DISABLED Manoj dark
[[https://www.nordtheme.com/docs/ports/emacs][website]]
#+BEGIN_SRC emacs-lisp
  ;; (load-theme 'manoj-dark)
#+END_SRC
** DISABLED Doom themes
   [[https://github.com/doomemacs/themes][github]]
#+begin_src emacs-lisp
  ;;  (use-package doom-themes
  ;; 	 :straight (doom-themes :host github
  ;; 						:repo "doomemacs/themes"
  ;; 						:branch "master")
  ;; 	 :config 
  ;; 	 (setq doom-themes-enable-bold t	 ; if nil, bold is universally disabled ;
  ;; 		   doom-themes-enable-italic t)
  ;; 	 ;; (load-theme 'doom-one t)
  ;; 	 (load-theme 'doom-zenburn t)
  ;; 	 ;; corrects (and improved) org-mode's native fontification
  ;; 	 (doom-themes-org-config)
  ;; )
#+end_src
** DISABLED Moe theme
#+begin_src emacs-lisp
  ;; (use-package moe-theme
	;; :straight t
	;; :config
	;; (load-theme 'moe-dark t))
#+end_src
** DISABLED Catpuccin-theme
#+BEGIN_COMMENT
#+begin_src emacs-lisp
  (use-package catppuccin-theme
	:straight t
	:config
	(load-theme 'catppuccin :no-confirm)
	(setq catppuccin-flavor 'mocha) ;; or 'latte, 'macchiato, or 'mocha or 'frappe
	(catppuccin-reload)
	)

#+end_src
#+END_COMMENT

* Aggressive Indent 
Keeps your code always indented.
[[https://github.com/Malabarba/aggressive-indent-mode][github]]
#+BEGIN_SRC emacs-lisp
  (use-package aggressive-indent
	:straight t
	:config
	;; (global-aggressive-indent-mode 1)
	(add-to-list 'aggressive-indent-excluded-modes 'html-mode)
   )
#+END_SRC

* Clipboard Copy/Paste
** Default
Makes killing/yanking interact with the clipboard
#+BEGIN_SRC emacs-lisp
  (setq-default x-select-enable-clipboard t)
  (setq select-enable-primary nil)
  (setq select-enable-clipboard t)
  (delete-selection-mode)
#+END_SRC
** DISABLED Simpleclip  
Simplified access to sytem clipboard.
#+BEGIN_SRC emacs-lisp
  ;; (use-package simpleclip
  ;;   :straight t
  ;;   :config
  ;;   (simpleclip-mode 1)
  ;;   :bind
  ;;   (("s-c" . simpleclip-copy)
  ;;    ("s-v" . simpleclip-paste)))
#+END_SRC

* Emacs Window Visuals
** Disable menu-bar, tool-bar and scroll-bar
#+BEGIN_SRC emacs-lisp
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
#+END_SRC
** Shrink fringes/borders to 1 pixel   
#+BEGIN_SRC emacs-lisp
  ;; (fringe-mode 1)
  ;; (setq left-fringe-width 16)
  (set-fringe-style (quote (2 . 8))) 
  (set-fringe-style (quote (12 . 8)))
#+END_SRC

* Display time Mode
#+BEGIN_SRC emacs-lisp
  (setq display-time-default-load-average nil)
  (display-time-mode t)
#+END_SRC

* Code Folding
** HideShow
  Change the folding levels in the according to the language. 
#+BEGIN_SRC emacs-lisp
	(use-package hideshow
	  :straight t
	  :init
	  (add-hook 'python-mode-hook #'hs-minor-mode)

	  :config 
	  (defun toggle-fold ()
		(interactive)
		(save-excursion
		  (end-of-line)
		  (hs-toggle-hiding)
  ))

	  :bind (;;("C--" . '(kbd "C-u 2 C-c @ C-l"))  ;; Fold everything below level 2, very helpful in python class file.
		 ("C--" . 'hs-hide-level)
		 ("C-=" . 'hs-toggle-hiding)
		 ;;("C-=" . 'toggle-fold)
		 )
	  )

#+END_SRC
** Origami
#+begin_src emacs-lisp
  (use-package origami
	:straight t
   )
#+end_src

* Pomodoro Timer
  Productivity timer. Give undivided attention to a specific task for 25 mins. Take a short break after.
  Timer will start in the emacs status bar.
  [[https://reposhub.com/python/miscellaneous/SqrtMinusOne-pomm-el.html][Link]]
#+BEGIN_SRC emacs-lisp
(use-package pomm
  :straight (:host github :repo "SqrtMinusOne/pomm.el")
  :commands (pomm)
  :config (pomm-mode-line-mode))
#+END_SRC 

* Ace window - Emacs window switching
#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :straight t
    :bind ("C-x o" . ace-window))
#+END_SRC
  
* Modeline Beautification
** Moodline
   [[https://github.com/jessiehildebrandt/mood-line][github]]
#+BEGIN_SRC emacs-lisp
  (use-package mood-line
    :straight t
    :config
    (mood-line-mode))
#+END_SRC 
** DISABLED Minions
#+BEGIN_SRC emacs-lisp
  ;; (use-package minions
    ;; :straight t
    ;; :config
    ;; (minions-mode 1))
#+END_SRC
** DISABLED Doom modeline
   [[https://github.com/seagle0128/doom-modeline][github]]
#+BEGIN_SRC emacs-lisp
  ;; (use-package doom-modeline
  ;;   :straight t
  ;;   :init
  ;;   (doom-modeline-mode 1))
#+END_SRC   
** DISABLED Telephone line
   [[https://github.com/dbordak/telephone-line][github]]
#+BEGIN_SRC emacs-lisp
  ;; (use-package telephone-line
    ;; :straight t
    ;; :init
    ;; (telephone-line-mode 1))
#+END_SRC      

* Magit - Git Interface of Emacs
  Magit is *magic*. 
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :straight t
    )
#+END_SRC

* Silver Searcher Ag 
  Mostly suggested by projectile

#+BEGIN_SRC emacs-lisp
(use-package ag
    :straight t
    )
#+END_SRC(use
  
* Projectile - Project Interaction Library
  Prequisite - Install "the_silver_searcher_ag" and "fd" on arch linux. Install ag in emacs.
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :straight t
    :config
    (projectile-mode +1)
    (projectile-global-mode +1)
    :bind-keymap ("C-c p" . projectile-command-map)
    )
#+END_SRC

* Github Markdown
  Preview github markdown to edit readme.rd files.
#+BEGIN_SRC emacs-lisp
  (use-package grip-mode
    :straight t
    :bind (("C-c g" . grip-mode))
  )
#+END_SRC

* Tab width
#+BEGIN_SRC emacs-lisp
(setq-default tab-width 4)
#+END_SRC

* Terminal window 
  Open a terminal window
#+BEGIN_SRC emacs-lisp
  (defun terminal-window()
	(interactive)
	(ansi-term (executable-find "bash")))

  (global-set-key (kbd "C-x t") 'terminal-window) 

#+END_SRC

* Flycheck
Modern on-the-fly syntax checking for emacs. Supposed to be replacement for inbuild flymake
#+begin_src emacs-lisp
  (use-package flycheck
	:straight t
	:ensure t
	:config
	(add-hook 'after-init-hook #'global-flycheck-mode)
	(flycheck-add-mode 'typescript-tslint 'web-mode)
	(flycheck-add-mode 'typescript-tslint 'jtsx-jsx-mode)
	(flycheck-add-mode 'typescript-tslint 'jtsx-tsx-mode)
	(flycheck-add-mode 'typescript-tslint 'jtsx-typescript-mode)
	)
#+end_src

* Python setup
** Python
#+begin_src emacs-lisp
  (use-package python-mode
	:ensure nil
	:custom
	(when (and (executable-find "python3")
			 (string= python-shell-interpreter "python"))
	(setq python-shell-interpreter "python3"))
	(py-underscore-word-syntax-p-off)
	;; (python-shell-interpreter "python3")
	)
#+end_src
** Python Virtual environment
   I have dedicated a virtual environment for emacs related python packages.
   Make sure to include the requirement.txt of this env to .emacs.d git repo.
#+BEGIN_SRC emacs-lisp
  ;; (use-package pyvenv
  ;;   :straight t
  ;;   :config
  ;;   ;; (pyvenv-activate "~/.virtualenvs/emacs-virtualenv")
  ;;   (setenv "WORKON_HOME" "~/virtualenvs")
  ;;   (setq pyvenv-mode-line-indicator '(pyvenv-virtual-env-name ("[venv:" pyvenv-virtual-env-name "] ")))
  ;;   (pyvenv-mode t))
#+END_SRC
** Elpy
#+BEGIN_SRC emacs-lisp
  ;; (use-package elpy
  ;;   :straight t
  ;;   :init (advice-add 'python-mode :before 'elpy-enable)
  ;;   ;; :hook (elpy-mode . (lambda () (add-hook 'before-save-hook 'elpy-format-code)))
  ;;   :custom
  ;;   (elpy-rpc-virtualenv-path 'current)  ;; this makes elpy use direnv venvs, check direnv setup section
  ;;   ;; :config
  ;;   ;; (setq elpy-rpc-virtualenv-path "~/virtualenvs/emacs_virtualenv/")
  ;;   (elpy-enable))
#+END_SRC   
** DISABLED Jedi
#+BEGIN_SRC emacs-lisp
  ;; (use-package jedi
  ;;   :straight t
  ;;   :init
  ;;   (add-hook 'python-mode-hook 'jedi:setup)
  ;;   :config
  ;;   (setq jedi:setup-keys t))
#+END_SRC
** py-autopep8
#+BEGIN_SRC emacs-lisp
  (use-package py-autopep8
	:straight t
	:config
	(setq py-autopep8-options '("--aggressive"))
	(setq py-autopep8-on-save-p nil)
	:hook ((python-mode) . py-autopep8-mode)
   )
#+END_SRC      
** python-black
#+BEGIN_SRC emacs-lisp
  (use-package python-black
	:straight t
	:demand t
	:after python)

#+END_SRC      
** sphinx docs
#+BEGIN_SRC emacs-lisp
   (use-package sphinx-doc
	   :straight (sphinx-doc :host github
							 :repo "naiquevin/sphinx-doc.el"
							 :branch "master")
	  :config (add-hook 'python-mode-hook (lambda ()
	  (sphinx-doc-mode t)))
	  )
  (message "sphinx loaded")
#+END_SRC
** DISABLED with-env
Execute with Python virtual environment activated
#+begin_src emacs-lisp
  ;; (use-package with-venv
  ;;   :straight (:host github :repo "10sr/with-venv-el")
  ;;   )
#+end_src
** emacs-pet
https://github.com/wyuenho/emacs-pet
Python Executable Tracker
#+begin_src emacs-lisp
  (use-package pet
	:config
	(add-hook 'python-base-mode-hook 'pet-mode -10))
#+end_src
** emacs-python-isort
Sort imports alphabetically and in sections automatically.
#+begin_src emacs-lisp
  (use-package python-isort
    :straight t
    )
#+end_src
** direnv setup
https://blog.jasper.es/elpy-direnv.html
#+begin_src emacs-lisp
  (use-package exec-path-from-shell
	:config (progn (exec-path-from-shell-initialize)))
  (use-package direnv
	:after exec-path-from-shell
	:config (direnv-mode))

  (use-package envrc
	:hook (after-init . envrc-global-mode))
#+end_src
** poetry
#+BEGIN_SRC emacs-lisp
  (use-package poetry
	:straight t
	:ensure t
	:after python)

#+END_SRC

* Emacs Ipython Notebook EIN
  Jypyter notebook client for emacs. 
#+begin_src emacs-lisp
  ;; (use-package ein
  ;;   :straight t
  ;;   :config 
  ;;   (setq ein:output-area-inlined-images t)
	;; )
  ;; load org-babel for ein
  ;; (org-babel-do-load-languages 'org-babel-load-languages
							   ;; (append org-babel-load-languages
									   ;; '((python . t)
										 ;; (ein . t))))


#+end_src

* Org roam
  Zettelkasten replica in emacs
  [[https://github.com/org-roam/org-roam][github]] [[https://lucidmanager.org/productivity/taking-notes-with-emacs-org-mode-and-org-roam/][lucidmanager_tutorial]
  setup org roam repo as a submodule in .emacs.d repo for sync. 
#+begin_src emacs-lisp
  (setq org-directory (concat (getenv "HOME") "/org-roam/"))

  (use-package org-roam
	:straight t
	:after org
	:custom
	(org-roam-directory (file-truename org-directory))
	:bind (("C-c n f" . org-roam-node-find)
		   ("C-c n r" . org-roam-node-random)
		   (:map org-mode-map 
				 (("C-c n i" . org-roam-node-insert)
				  ("C-c n o" . org-id-get-create)
				  ("C-c n t" . org-roam-tag-add)
				  ("C-c n a" . org-roam-alias-add)
				  ("C-c n l" . org-roam-buffer-toggle)
				  ("C-c n g" . org-roam-graph)
				  ("C-c n c" . org-roam-capture)
				  ;; Dailies
				  ("C-c n d" . org-roam-dailies-capture-today))))
	:config
	;; If you're using a vertical completion framework, you might want a more informative completion interface
	(setq org-roam-node-display-template (concat "${title:*} " (propertize "${tags:10}" 'face 'org-tag)))
	(org-roam-db-autosync-mode)
	;; If using org-roam-protocol
	(require 'org-roam-protocol)
	)
#+end_src
** Org roam ui
Graphical frontend for org roam zettelkasten
#+begin_src emacs-lisp
    (use-package org-roam-ui
      :straight (:host github :repo "org-roam/org-roam-ui" :branch "main" :files ("*.el" "out"))
      :after org-roam
      :config
      (setq org-roam-ui-sync-theme t
            org-roam-ui-follow t
            org-roam-ui-update-on-save t
            org-oram-ui-open-on-start t)
      )
#+end_src

* Treemacs
  [[https://github.com/Alexander-Miller/treemacs][github]]
  Emacs as an IDE. Easy project navigation, better window views. Lets see. 
#+begin_src emacs-lisp
  (use-package treemacs 
	:straight t
	:ensure t
	:defer t
	:init
	(with-eval-after-load  'winum
	  (define-key winun-keymap (kbd "M-o") #'treemacs-select-window))
	:config (progn
			  (setq treemacs-expand-after-init  t)
			  ;; (setq treemacs-indent-guide-style 'block)
			  (treemacs-follow-mode nil)
			  (treemacs-fringe-indicator-mode 'always)
			  (treemacs-filewatch-mode t)
			  (treemacs-indent-guide-mode)

			  (pcase (cons (not (null (executable-find "git")))
				 (not (null treemacs-python-executable)))
				(`(t . t)
				 (treemacs-git-mode 'deferred))
				(`(t . _)
				 (treemacs-git-mode 'simple)))
			  (treemacs-hide-gitignored-files-mode nil)
			  )
	:bind 
	(:map global-map
						("M-o"     . treemacs-select-window)
						("C-c t t" . treemacs))
	)
#+end_src
** Treemacs Projectile
#+begin_src emacs-lisp
  (use-package treemacs-projectile
         :after (treemacs projectile)
   )
 #+end_src
** Treemacs Magit
   #+begin_src emacs-lisp
	 (use-package treemacs-magit
	   :after (treemacs magit)
	   :ensure t
	   )
   #+end_src
** Treemacs icons dired
#+begin_src emacs-lisp
  ;; (use-package treemacs-icons-dired
  ;;   :hook (dired-mode . treemacs-icons-dired-enable-once)
  ;;   :ensure t)

#+end_src
  
* DISABLED GTD 
  Getting things done 
  inbox - capture tasks, while reviewing, refile the task to corresponding file, project
  personal - personal projects tracking
  vyn - projects related to vyntelligence, humanlearning pvt ltd
  tickler - add task with timestamp to get reminded at the right moment, it would
  be easier if able to integrate google calender with this
  #+BEGIN_COMMENT
#+begin_src emacs-lisp
(setq org-agenda-files '("~/ankit/emacs/gtd/inbox.org"
                         "~/ankit/emacs/gtd/personal.org"
                         "~/ankit/emacs/gtd/vyn.org"
                         "~/ankit/emacs/gtd/tickler.org"))
(setq org-todo-keywords '((sequence "TODO(t)" "WIP(w)" "|" "DONE(d)" "CANCELLED" "WAITING")))

(global-set-key (kbd "C-c c") 'org-capture)
(global-set-key (kbd "C-c a") 'org-agenda)
(setq org-capture-templates
      '(("t" "Todo [inbox]" entry (file+headline "~/ankit/emacs/gtd/inbox.org" "Tasks")
         "* TODO %?\n  %i\n")
        ("T" "Tickler" entry
         (file+headline "~/ankit/emacs/gtd/tickler.org" "Tickler")
         "* %i% \n %U")))

(setq org-refile-targets '(("~/ankit/emacs/gtd/personal.org" :maxlevel . 1)
                           ("~/ankit/emacs/gtd/vyn.org" :level . 1)
                          ("~/ankit/emacs/gtd/tickler.org" :maxlevel . 2)))

#+end_src
#+END_COMMENT

* Markdown mode
  Major mode for editing markdown formatted text.
#+begin_src emacs-lisp
  (use-package markdown-mode
	:straight t
	:mode ("README\\.md\\'" . gfm-mode)
	:init (setq markdown-command "multimarkdown"))
  ;; grip to preview in github on localhost.

#+end_src

* Dirvish - Improved Dired.
Model file manager. now working as of now with below error.
 
#+begin_src emacs-lisp
  (use-package dirvish
    :init
    (dirvish-override-dired-mode)
    )
#+end_src

* Company
Code and text completion
#+begin_src emacs-lisp
  (use-package company
	:straight t
	:ensure t
	:defer t
	:custom
	(company-minimum-prefix-length 1)
	(company-idle-delay 0.1)
	(company-tooltip-align-annotations t)
	(company-require-match 'never)
	;; dont use company is following modes
	(company-global-modes '(not eshell-mode shell-mode eaf-mode))
	(company-dabbrev-downcase nil)
	(company-dabbrev-other-buffers t) ;; search buffers with same major mode
	(company-dabbrev-ignore-case t)
	(company-selection-wrap-around t)
	(setq company-backends '((company-capf company-dabbrev-code company-files)))
	(global-company-mode t)
	)
#+end_src

* TODO Prescient

* TODO Mwin - Move where I Mean

* Yasnippet
#+begin_src emacs-lisp
  (use-package yasnippet
	:straight t
	:config
	(yas-global-mode 1)
   )
#+end_src

* DISABLED LSP-Bridge
#+BEGIN_COMMENT
https://github.com/manateelazycat/lsp-bridge
#+begin_src emacs-lisp
  (use-package lsp-bridge
  :straight '(lsp-bridge :type git :host github :repo "manateelazycat/lsp-bridge"
            :files (:defaults "*.el" "*.py" "acm" "core" "langserver" "multiserver" "resources")
            :build (:not compile))
  :init
  (global-lsp-bridge-mode))
#+end_src
#+END_COMMENT

* LSP mode.
IDE like experience in emacs with debugger support.
** Fix LSP performance issues
https://emacs-lsp.github.io/lsp-mode/page/performance/
#+begin_src emacs-lisp
  (setq gc-cons-threshold 100000000)
  (setq read-process-output-max (* 1024 1024)) ;; 1mb
  (setq lsp-log-io nil) ; if set to true can cause a performance hit

#+end_src

#+begin_src emacs-lisp
  (use-package lsp-mode
	:straight (:host github :repo "emacs-lsp/lsp-mode")
	:init
	(setq lsp-keymap-prefix "C-c l")
	:hook ((python-mode . lsp-deferred)			
		   (lsp-mode . lsp-enable-which-key-integration)
		   (jtsx-jsx-mode . lsp)
		   (jtsx-tsx-mode . lsp)
		   (jtsx-typescript-mode . lsp))
	:commands (lsp lsp-deferred)
	:config
	(setq lsp-enable-symbol-highlighting t)
	(setq lsp-lens-enable t)
	(setq lsp-headerline-breadcrumb-enable t)
	(setq lsp-completion-enable t)
	(setq lsp-modeline-diagnostic-enable t)
	(setq lsp-enable-snippet t)
	(setq lsp-completion-provider :capf)

	(setq lsp-enable-symbol-highlighting t)
	(setq lsp-ui-doc-enable t)
	(setq lsp-ui-doc-show-with-cursor t)
	(setq lsp-ui-doc-show-with-mouse t)
	(setq lsp-lens-enable t)
	(setq lsp-headerline-breadcrumb-enable t)
	(setq lsp-ui-sideline-enable t)
	(setq lsp-ui-sideline-show-code-actions nil)
	(setq lsp-ui-sideline-show-hover nil)
	(setq lsp-modelne-code-actions-enable t)

	(setq lsp-diagnostic-provider :flycheck)
	(setq lsp-ui-sideline-show-diagnostic t)
	(setq lsp-eldoc-enable-hover t)
	(setq lsp-modeline-diagnostic-enable t)
	(setq lsp-signature-auto-activate t)
	(setq lsp-signature-render-documentation t)

	;; fixes double imports and tsconfig popup in ts ls server
	(setq lsp-apply-edits-after-file-operations nil)

	;; pylsp plugins
	;; (setq lsp-pylsp-plugins-flake8-enabled t)
	;; (setq lsp-pylsp-plugins-autopep8-enabled t)
	;; (setq lsp-pylsp-plugins-mccabe-enabled t)

	)
  ;;  putting clients subdir to load_path as mentioned in lsp installation page.
  (add-to-list 'load-path (expand-file-name "straight/repos/lsp-mode" user-emacs-directory))
  (add-to-list 'load-path (expand-file-name "straight/repos/lsp-mode/clients" user-emacs-directory))
#+end_src

** LSP UI

#+begin_src emacs-lisp
  (use-package lsp-ui
	:after lsp-mode
	:commands lsp-ui-mode
	:hook (lsp-mode . lsp-ui-mode)
	:custom
	(setq lsp-ui-doc-postion 'at-point)
	(setq lsp-ui-sideline-delay 0.1)
	(setq lsp-ui-peek-always-show t)

	)
#+end_src


** LSP pyright
#+begin_src emacs-lisp
  (use-package lsp-pyright
	:ensure t
	:custom (lsp-pyright-langserver-command "basedpyright") ;; or basedpyright

	:hook (python-mode . (lambda ()
						   (require 'lsp-pyright)
						   (lsp-deferred)))
	:config
	(setq lsp-enable-file-watchers nil)
	) 
#+end_src

** LSP treemacs

#+begin_src emacs-lisp
  (use-package lsp-treemacs
    :straight t
    :config
    (lsp-treemacs-sync-mode 1)
    )
#+end_src


* DAP - Debug Adaptor Protocol
#+begin_src emacs-lisp
  (use-package dap-mode
    :ensure t :after lsp-mode
    :hook ((python-mode . dap-ui-mode)
           (python-mode . dap-mode))
    :config
    (require 'dap-python)
    (require 'dap-ui)
    (setq dap-python-debugger `debugpy)
    (dap-mode 1)
    (dap-ui-mode 1)
    ;; enable mouse hover support
    (dap-tooltip-mode 1)
    ;; if it is not enabled, `dap-mode` will use the minibuffer
    (tooltip-mode t)
    (dap-ui-controls-mode 1)

    (defun dap-python--pyenv-executable-find (command)
      (with-venv (executable-find "python")))

    )
#+end_src


* DISABLED Eglot
#+BEGIN_COMMENT
#+begin_src emacs-lisp
  (use-package eglot
	:straight t
	:ensure t
	:config
	(with-eval-after-load "eglot"
	  (add-to-list 'eglot-stay-out-of 'flymake))

	;; add arduino-language server
	;; (add-to-list 'eglot-server-programs '(c++-mode . ("~/ankit/tools/arduino-language-server/arduino-language-server"
	;; 													"-clangd" "/usr/bin/clangd-12"
	;; 													"-cli" "~/.local/bin/arduino-cli"
	;; 													"-cli-config" "~/.arduino15/arduino-cli.yaml"
	;; 													"-fqbn" "arduino:avr:mega")))

	;; add cpp lsp server
	;; (add-to-list 'eglot-server-programs
	;; 			   '((c++mode c-mode) "clangd-12")
	;; 			   ()
	;; 			   `(rust-mode . ("rust-analyzer" :initializationOptions
	;; 								   ( :procMacro (:enable t)
	;; 									 :cargo ( :buildScripts (:enable t)
	;; 											  :features "all"))))
				 ;; )

	;; (add-to-list 'eglot-server-programs '((jtsx-tsx-mode jtsx-typescript-mode jtsx-jsx-mode) . ("tailwindcss-language-server")))


	:hook
	((python-mode . eglot-ensure)
	 ;; (arduino-mode . eglot-ensure)
	 ;; (c++-mode . eglot-ensure)
	 ;; (c-mode. eglot-ensure)
	 ;; (rust-mode . eglot-ensure)
	 (typescript-mode . eglot-ensure)
	 (jtsx-jsx-mode . eglot-ensure)
	 (jtsx-tsx-mode . eglot-ensure)
	 (jtsx-typescript-mode . eglot-ensure)
	 )
	)

#+end_src
#+END_COMMENT

* DISABLED Todoist
#+begin_comment
#+begin_src emacs-lisp
  (load "~/.emacs.d/todoist-token")
  (use-package todoist
	;; :straight (:host github :repo "abrochard/emacs-todoist")
	:straight t
  )
#+end_src
#+end_comment

* DISABLED emacs-direnv
direnv integration with emacs.
Changes global set of environment variables.
#+begin_src emacs-lisp
  ;; (use-package direnv
	;; :config
	;; (direnv-mode))
#+end_src
** .envrc
Sets all the environment variables locally.
#+begin_src emacs-lisp
  (use-package envrc
	:straight t
	:config
	(envrc-global-mode)
	)
#+end_src


* DISABLED Arduino Mode
#+begin_src emacs-lisp
  ;; (use-package arduino-mode
  ;;   :straight t
  ;;   )
#+end_src

* Json mode
#+begin_src emacs-lisp
  (use-package json-mode
    :straight t
    :config
    (add-hook 'json-mode-hook
              (lambda ()
                (make-local-variable 'js-indent-level)
                (setq tab-width 4)
                (setq js-indent-level 4)))

    )
#+end_src

* Rust mode
#+begin_src emacs-lisp
  (use-package rust-mode
	:straight t
	)
#+end_src

* TODO Treesitter
Inbuild from emacs 29.
#+begin_src emacs-lisp
  
#+end_src


* Frontend setup
** DISABLED Typescript mode
For javascript and nextjs
#+BEGIN_COMMENT
#+begin_src emacs-lisp
  (use-package typescript-mode
	:straight t
	:ensure t
	:config
	(setq typescript-indent-level 4)
	(add-hook 'typescript-mode #'subword-mode)
	(add-to-list 'auto-mode-alist '("\\.tsx\\'" . typescript-mode))

	)

#+end_src
#+END_COMMENT

** DISABLED Tide - Typescript Interactive Dev
https://github.com/ananthakumaran/tide
#+BEGIN_COMMENT
#+begin_src emacs-lisp
  (use-package tide
	:ensure t
	:after (typescript-mode company flycheck)
	:hook ((typescript-mode . tide-setup)
		   (typescript-mode . tide-hl-identifier-mode)
		   (before-save . tide-format-before-save)))
#+end_src
#+END_COMMENT

** Prettier-js 
Formatting for js code

#+begin_src emacs-lisp
  (use-package prettier-js
	:straight t
	:config
	(setq prettier-js-args '(
							 "--trailing-comma" "all"
							 "--bracket-spacing" "false"
							 "--tab-width" "4"
							 ))
	)
#+end_src

** Web mode

#+begin_src emacs-lisp
  (use-package web-mode
	:straight t
	:config
	(add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
	)
#+end_src

** DISABLED RJSX Mode
#+BEGIN_COMMENT
#+begin_src emacs-lisp
  (use-package rjsx-mode
	:straight t
	:ensure t
	:config 
	(add-to-list 'auto-mode-alist '("\\.tsx\\'" . rjsx-mode))
	)
#+end_src
#+END_COMMENT

** Tailwind LSP
LSP client for tailwind. Autocompletes tailwind utility classes

#+begin_src emacs-lisp
  (use-package lsp-tailwindcss
	:straight (:host github :repo "merrickluo/lsp-tailwindcss")
	:init 
	(setq lsp-tailwindcss-add-on-mode t)
	)
#+end_src


** JTSX Mode
Extends emacs support for jsx/tsx. Works with treesitter.
Install treesitter language grammer before using the package.
Refer https://github.com/llemaitre19/jtsx for installation steps. 

#+begin_src emacs-lisp
  (use-package jtsx
	:straight (:host github :repo "llemaitre19/jtsx")
	:ensure t
	:mode (("\\.jsx?\\'" . jtsx-jsx-mode)
		   ("\\.tsx\\'" . jtsx-tsx-mode)
		   ("\\.ts\\'" . jtsx-typescript-mode))
	:commands jtsx-install-treesit-language
	:hook ((jtsx-jsx-mode . hs-minor-mode)
		   (jtsx-tsx-mode . hs-minor-mode)
		   (jtsx-typescript-mode . hs-minor-mode))
	;; :custom
	;; Optional customizations
	;; (js-indent-level 2)
	;; (typescript-ts-mode-indent-offset 2)
	;; (jtsx-switch-indent-offset 0)
	;; (jtsx-indent-statement-block-regarding-standalone-parent nil)
	;; (jtsx-jsx-element-move-allow-step-out t)
	;; (jtsx-enable-jsx-electric-closing-element t)
	;; (jtsx-enable-electric-open-newline-between-jsx-element-tags t)
	;; (jtsx-enable-jsx-element-tags-auto-sync nil)
	;; (jtsx-enable-all-syntax-highlighting-features t)
	:config
	(defun jtsx-bind-keys-to-mode-map (mode-map)
	  "Bind keys to MODE-MAP."
	  (define-key mode-map (kbd "C-c C-j") 'jtsx-jump-jsx-element-tag-dwim)
	  (define-key mode-map (kbd "C-c j o") 'jtsx-jump-jsx-opening-tag)
	  (define-key mode-map (kbd "C-c j c") 'jtsx-jump-jsx-closing-tag)
	  (define-key mode-map (kbd "C-c j r") 'jtsx-rename-jsx-element)
	  (define-key mode-map (kbd "C-c <down>") 'jtsx-move-jsx-element-tag-forward)
	  (define-key mode-map (kbd "C-c <up>") 'jtsx-move-jsx-element-tag-backward)
	  (define-key mode-map (kbd "C-c C-<down>") 'jtsx-move-jsx-element-forward)
	  (define-key mode-map (kbd "C-c C-<up>") 'jtsx-move-jsx-element-backward)
	  (define-key mode-map (kbd "C-c C-S-<down>") 'jtsx-move-jsx-element-step-in-forward)
	  (define-key mode-map (kbd "C-c C-S-<up>") 'jtsx-move-jsx-element-step-in-backward)
	  (define-key mode-map (kbd "C-c j w") 'jtsx-wrap-in-jsx-element)
	  (define-key mode-map (kbd "C-c j u") 'jtsx-unwrap-jsx)
	  (define-key mode-map (kbd "C-c j d") 'jtsx-delete-jsx-node)
	  (define-key mode-map (kbd "C-c j t") 'jtsx-toggle-jsx-attributes-orientation)
	  (define-key mode-map (kbd "C-c j h") 'jtsx-rearrange-jsx-attributes-horizontally)
	  (define-key mode-map (kbd "C-c j v") 'jtsx-rearrange-jsx-attributes-vertically))

	(defun jtsx-bind-keys-to-jtsx-jsx-mode-map ()
	  (jtsx-bind-keys-to-mode-map jtsx-jsx-mode-map))

	(defun jtsx-bind-keys-to-jtsx-tsx-mode-map ()
	  (jtsx-bind-keys-to-mode-map jtsx-tsx-mode-map))

	(add-hook 'jtsx-jsx-mode-hook 'jtsx-bind-keys-to-jtsx-jsx-mode-map)
	(add-hook 'jtsx-tsx-mode-hook 'jtsx-bind-keys-to-jtsx-tsx-mode-map)
	)
#+end_src

* LSP Mode simple
#+BEGIN_COMMENT
#+begin_src emacs-lisp
  (use-package lsp-mode
	 :init
	 ;; set prefix for lsp-command-keymap (few alternatives - "C-l", "C-c l")
	 (setq lsp-keymap-prefix "C-c l")
	 :hook (;; replace XXX-mode with concrete major-mode(e. g. python-mode)
			(typescript-mode . lsp)
			(rjsx-mode . lsp)
			;; if you want which-key integration
			(lsp-mode . lsp-enable-which-key-integration)
			(jtsx-jsx-mode . lsp)
			(jtsx-tsx-mode . lsp)
			(jtsx-typescript-mode . lsp))
	 :commands lsp)

	(use-package lsp-ui :commands lsp-ui-mode)

#+end_src
#+END_COMMENT

* Gptel - LLM Client
  [[https://github.com/karthink/gptel][github]]
  Do not commit api key. For chatgpt create ~/.authinfo for credentials.
#+begin_src emacs-lisp
  (use-package gptel
	:straight t
	:config
	;; OPTIONAL configuration
	;; Configuration for Claude
	;; (setq
	;;  gptel-model "claude-3-sonnet-20240229" ;  "claude-3-opus-20240229" also available
	;;  gptel-backend (gptel-make-anthropic "Claude"
	;; 									   :stream t :key ""))
	
   ) 
#+end_src

* Restclient
   [[https://github.com/pashky/restclient.el][github]]
   #+BEGIN_SRC emacs-lisp
	 (use-package restclient
	   :straight t
	   )
   #+END_SRC
  

* Finish message
#+begin_src emacs-lisp
  (message "config loaded")
#+end_src







